{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5cf11746",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Test Date  Student ID Class   Rank  Kicho 1 and 2  Stances  Blocks  \\\n",
      "0  2023-03-25        1704    JR  WHITE            3.0      3.0     3.5   \n",
      "1  2023-03-25        4660    JR  WHITE            4.0      4.0     3.5   \n",
      "2  2023-03-25       19110    JR  WHITE            3.5      3.0     3.5   \n",
      "3  2023-03-25        7728    JR  WHITE            4.0      3.5     3.5   \n",
      "4  2023-03-25        7665    JR  WHITE            3.0      3.0     3.5   \n",
      "5  2023-03-25        5763    JR  WHITE            3.5      3.5     3.5   \n",
      "6  2023-03-25       98910    JR  WHITE            5.0      5.0     5.0   \n",
      "7  2023-03-25       98908    JR  WHITE            3.0      3.0     3.0   \n",
      "8  2023-03-25        3017    JR  WHITE            4.0      4.5     4.0   \n",
      "9  2023-03-25       98906    JR  WHITE            4.5      4.5     5.0   \n",
      "10 2023-03-25        3123    JR  WHITE            4.5      4.0     4.0   \n",
      "\n",
      "    Hand Strikes  Poomsae Kicks  High-Rising  Out-In  In-Out  Roundhouse  \\\n",
      "0            3.5            4.0          4.5     3.5     3.5         3.5   \n",
      "1            3.5            4.5          4.5     4.0     4.5         4.5   \n",
      "2            3.5            3.0          4.0     4.0     4.0         3.5   \n",
      "3            4.0            4.0          5.0     4.5     4.0         4.5   \n",
      "4            3.0            3.5          2.0     3.5     3.5         5.0   \n",
      "5            3.5            3.5          3.5     3.0     3.0         4.0   \n",
      "6            5.0            5.0          5.0     5.0     5.0         5.0   \n",
      "7            3.0            4.0          4.5     4.0     4.0         4.0   \n",
      "8            4.0            4.0          3.5     4.0     3.5         4.0   \n",
      "9            4.5            5.0          NaN     NaN     NaN         4.5   \n",
      "10           4.5            4.5          5.0     3.5     3.5         5.0   \n",
      "\n",
      "    Front  Kick AVG  Breaking  Sparring  Questions  \n",
      "0     3.5      3.70         5       4.5          5  \n",
      "1     4.5      4.40         5       4.5          5  \n",
      "2     4.0      3.90         5       4.5          5  \n",
      "3     5.0      4.60         4       4.5          5  \n",
      "4     5.0      3.80         5       5.0          5  \n",
      "5     4.0      3.50         5       3.0          5  \n",
      "6     5.0      5.00         5       4.5          5  \n",
      "7     4.5      4.20         5       4.0          5  \n",
      "8     4.5      3.90         5       4.5          5  \n",
      "9     5.0      4.75         5       4.5          5  \n",
      "10    4.5      4.30         5       5.0          5  \n"
     ]
    }
   ],
   "source": [
    "# Installing Pandas and os \n",
    "\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "# Importing Data Frame \n",
    "df = pd.read_excel(r\"C:\\Users\\k4leu\\OneDrive\\Documents\\white_belts_3.25.xlsx\")\n",
    "\n",
    "# Data Fram Overview \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b67f71f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 11 entries, 0 to 10\n",
      "Data columns (total 18 columns):\n",
      " #   Column         Non-Null Count  Dtype         \n",
      "---  ------         --------------  -----         \n",
      " 0   Test Date      11 non-null     datetime64[ns]\n",
      " 1   Student ID     11 non-null     int64         \n",
      " 2   Class          11 non-null     object        \n",
      " 3   Rank           11 non-null     object        \n",
      " 4   Kicho 1 and 2  11 non-null     float64       \n",
      " 5   Stances        11 non-null     float64       \n",
      " 6   Blocks         11 non-null     float64       \n",
      " 7   Hand Strikes   11 non-null     float64       \n",
      " 8   Poomsae Kicks  11 non-null     float64       \n",
      " 9   High-Rising    10 non-null     float64       \n",
      " 10  Out-In         10 non-null     float64       \n",
      " 11  In-Out         10 non-null     float64       \n",
      " 12  Roundhouse     11 non-null     float64       \n",
      " 13  Front          11 non-null     float64       \n",
      " 14  Kick AVG       11 non-null     float64       \n",
      " 15  Breaking       11 non-null     int64         \n",
      " 16  Sparring       11 non-null     float64       \n",
      " 17  Questions      11 non-null     int64         \n",
      "dtypes: datetime64[ns](1), float64(12), int64(3), object(2)\n",
      "memory usage: 1.7+ KB\n"
     ]
    }
   ],
   "source": [
    "# Data Frame objects\n",
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4c883ee0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Student ID</th>\n",
       "      <th>Kicho 1 and 2</th>\n",
       "      <th>Stances</th>\n",
       "      <th>Blocks</th>\n",
       "      <th>Hand Strikes</th>\n",
       "      <th>Poomsae Kicks</th>\n",
       "      <th>High-Rising</th>\n",
       "      <th>Out-In</th>\n",
       "      <th>In-Out</th>\n",
       "      <th>Roundhouse</th>\n",
       "      <th>Front</th>\n",
       "      <th>Kick AVG</th>\n",
       "      <th>Breaking</th>\n",
       "      <th>Sparring</th>\n",
       "      <th>Questions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.00</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>31772.181818</td>\n",
       "      <td>3.818182</td>\n",
       "      <td>3.727273</td>\n",
       "      <td>3.818182</td>\n",
       "      <td>3.818182</td>\n",
       "      <td>4.090909</td>\n",
       "      <td>4.150000</td>\n",
       "      <td>3.900000</td>\n",
       "      <td>3.850000</td>\n",
       "      <td>4.318182</td>\n",
       "      <td>4.50</td>\n",
       "      <td>4.186364</td>\n",
       "      <td>4.909091</td>\n",
       "      <td>4.409091</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>43364.205976</td>\n",
       "      <td>0.680908</td>\n",
       "      <td>0.719848</td>\n",
       "      <td>0.643146</td>\n",
       "      <td>0.643146</td>\n",
       "      <td>0.625227</td>\n",
       "      <td>0.944281</td>\n",
       "      <td>0.567646</td>\n",
       "      <td>0.579751</td>\n",
       "      <td>0.560032</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.472277</td>\n",
       "      <td>0.301511</td>\n",
       "      <td>0.539360</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1704.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.50</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3891.500000</td>\n",
       "      <td>3.250000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.750000</td>\n",
       "      <td>3.625000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.25</td>\n",
       "      <td>3.850000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7665.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.750000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>4.50</td>\n",
       "      <td>4.200000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>59008.000000</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>4.875000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.750000</td>\n",
       "      <td>5.00</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>98910.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.00</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Student ID  Kicho 1 and 2    Stances     Blocks  Hand Strikes  \\\n",
       "count     11.000000      11.000000  11.000000  11.000000     11.000000   \n",
       "mean   31772.181818       3.818182   3.727273   3.818182      3.818182   \n",
       "std    43364.205976       0.680908   0.719848   0.643146      0.643146   \n",
       "min     1704.000000       3.000000   3.000000   3.000000      3.000000   \n",
       "25%     3891.500000       3.250000   3.000000   3.500000      3.500000   \n",
       "50%     7665.000000       4.000000   3.500000   3.500000      3.500000   \n",
       "75%    59008.000000       4.250000   4.250000   4.000000      4.250000   \n",
       "max    98910.000000       5.000000   5.000000   5.000000      5.000000   \n",
       "\n",
       "       Poomsae Kicks  High-Rising     Out-In     In-Out  Roundhouse  Front  \\\n",
       "count      11.000000    10.000000  10.000000  10.000000   11.000000  11.00   \n",
       "mean        4.090909     4.150000   3.900000   3.850000    4.318182   4.50   \n",
       "std         0.625227     0.944281   0.567646   0.579751    0.560032   0.50   \n",
       "min         3.000000     2.000000   3.000000   3.000000    3.500000   3.50   \n",
       "25%         3.750000     3.625000   3.500000   3.500000    4.000000   4.25   \n",
       "50%         4.000000     4.500000   4.000000   3.750000    4.500000   4.50   \n",
       "75%         4.500000     4.875000   4.000000   4.000000    4.750000   5.00   \n",
       "max         5.000000     5.000000   5.000000   5.000000    5.000000   5.00   \n",
       "\n",
       "        Kick AVG   Breaking   Sparring  Questions  \n",
       "count  11.000000  11.000000  11.000000       11.0  \n",
       "mean    4.186364   4.909091   4.409091        5.0  \n",
       "std     0.472277   0.301511   0.539360        0.0  \n",
       "min     3.500000   4.000000   3.000000        5.0  \n",
       "25%     3.850000   5.000000   4.500000        5.0  \n",
       "50%     4.200000   5.000000   4.500000        5.0  \n",
       "75%     4.500000   5.000000   4.500000        5.0  \n",
       "max     5.000000   5.000000   5.000000        5.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking Initial statistics for Data Frame \n",
    "\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "64280a49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kicho 1 and 2</th>\n",
       "      <th>Stances</th>\n",
       "      <th>Blocks</th>\n",
       "      <th>Hand Strikes</th>\n",
       "      <th>Poomsae Kicks</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4.5</td>\n",
       "      <td>4.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>4.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Kicho 1 and 2  Stances  Blocks  Hand Strikes  Poomsae Kicks\n",
       "0             3.0      3.0     3.5           3.5            4.0\n",
       "1             4.0      4.0     3.5           3.5            4.5\n",
       "2             3.5      3.0     3.5           3.5            3.0\n",
       "3             4.0      3.5     3.5           4.0            4.0\n",
       "4             3.0      3.0     3.5           3.0            3.5\n",
       "5             3.5      3.5     3.5           3.5            3.5\n",
       "6             5.0      5.0     5.0           5.0            5.0\n",
       "7             3.0      3.0     3.0           3.0            4.0\n",
       "8             4.0      4.5     4.0           4.0            4.0\n",
       "9             4.5      4.5     5.0           4.5            5.0\n",
       "10            4.5      4.0     4.0           4.5            4.5"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating data subset of all Poomsae scores. \n",
    "\n",
    "psae_scores = df[['Kicho 1 and 2', 'Stances', 'Blocks', 'Hand Strikes', 'Poomsae Kicks']]\n",
    "psae_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d6b5ed92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>psae Components</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kicho 1 and 2</th>\n",
       "      <td>3.818182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stances</th>\n",
       "      <td>3.727273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Blocks</th>\n",
       "      <td>3.818182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hand Strikes</th>\n",
       "      <td>3.818182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Poomsae Kicks</th>\n",
       "      <td>4.090909</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Avg\n",
       "psae Components          \n",
       "Kicho 1 and 2    3.818182\n",
       "Stances          3.727273\n",
       "Blocks           3.818182\n",
       "Hand Strikes     3.818182\n",
       "Poomsae Kicks    4.090909"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finding the average score of 'Kicho 1 and 2' Patterns and Components\n",
    "# Creating a Data Frame with averages\n",
    "\n",
    "psae_avr = pd.DataFrame(psae_scores.mean(), columns = ['Avg'])\n",
    "psae_avr.index.name = 'psae Components'\n",
    "psae_avr\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "168cf348",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Avg    3.727273\n",
       "dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Finding Lowest average is 3.7 - Stances \n",
    "\n",
    "psae_avr.idxmin()\n",
    "psae_avr.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4196e79b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.090909090909091"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finding Highest average is 4.1 - Poomsae Kicks\n",
    "\n",
    "psae_avr.max() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "24cd71bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a Column Graph of the Psae Data Frame\n",
    "\n",
    "psae_avr.plot(kind='barh', figsize=(10,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1dccc5ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a subset of all kicking scores that are not related to Poomsae \n",
    "\n",
    "kick_score = df[[ 'High-Rising', 'Out-In','In-Out', 'Roundhouse', 'Front', 'Kick AVG',]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f8e934ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kick Type</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>High-Rising</th>\n",
       "      <td>4.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Out-In</th>\n",
       "      <td>3.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>In-Out</th>\n",
       "      <td>3.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Roundhouse</th>\n",
       "      <td>4.318182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Front</th>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kick AVG</th>\n",
       "      <td>4.186364</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Avg\n",
       "Kick Type            \n",
       "High-Rising  4.150000\n",
       "Out-In       3.900000\n",
       "In-Out       3.850000\n",
       "Roundhouse   4.318182\n",
       "Front        4.500000\n",
       "Kick AVG     4.186364"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finding average kick scores and creating a data frame with averages\n",
    "\n",
    "kick_avr = pd.DataFrame(kick_score.mean(), columns=['Avg'])\n",
    "kick_avr.index.name='Kick Type'\n",
    "kick_avr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c8d7709c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Avg    3.85\n",
       "dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finding Lowest average kick is the Inside-Outside Crescent Kick\n",
    "\n",
    "kick_avr.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c6d8a37d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Avg    4.5\n",
       "dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finding Highest Average kick score is the Front Kick\n",
    "\n",
    "kick_avr.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "defa174b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Kick Type'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a Column Chart with the kick_avr Data Frame\n",
    "\n",
    "kick_avr.plot(kind='barh', figsize=(10,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "523a939e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting psae_avr and kick_avr to Excel and into Tableau\n",
    "    \n",
    "path = os.path.join(os.path.expanduser(\"~\"), \"Documents\", r\"C:\\Users\\k4leu\\OneDrive\\Documents\\BELT TESTING DATA\")\n",
    "kick_avr.to_csv(os.path.join(path, 'kick_avr.csv'), index = True)\n",
    "\n",
    "path = os.path.join(os.path.expanduser(\"~\"), \"Documents\", r\"C:\\Users\\k4leu\\OneDrive\\Documents\\BELT TESTING DATA\")\n",
    "psae_avr.to_csv(os.path.join(path, 'psae.csv'), index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5120d3b7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd038f1c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
